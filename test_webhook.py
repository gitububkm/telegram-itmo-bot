#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Telegram –±–æ—Ç–∞
"""

import os
import json
import requests
import sys
from main import create_application

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

    token = os.getenv('TELEGRAM_BOT_TOKEN')
    schedule_json = os.getenv('SCHEDULE_JSON')
    render_app_name = os.getenv('RENDER_APP_NAME')
    port = os.getenv('PORT', '10000')

    checks = [
        ('TELEGRAM_BOT_TOKEN', token, '–¢–æ–∫–µ–Ω –±–æ—Ç–∞'),
        ('SCHEDULE_JSON', schedule_json, 'JSON —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'),
        ('RENDER_APP_NAME', render_app_name, '–ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Render'),
        ('PORT', port, '–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞')
    ]

    all_good = True
    for var_name, value, description in checks:
        if value:
            print(f"‚úÖ {description}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print(f"‚ùå {description}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            all_good = False

    return all_good

def test_bot_locally():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ"""
    print("\nüöÄ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞...")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = create_application()
    if not app:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        return False

    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /start
    try:
        test_update = {
            "update_id": 123456789,
            "message": {
                "message_id": 1,
                "from": {
                    "id": 123456789,
                    "is_bot": False,
                    "first_name": "Test",
                    "username": "testuser"
                },
                "chat": {
                    "id": 123456789,
                    "type": "private"
                },
                "date": 1640995200,
                "text": "/start"
            }
        }

        print("üì® –¢–µ—Å—Ç–∏—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /start")
        from telegram import Update
        update = Update.de_json(test_update, app.bot)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        print("üéØ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def check_render_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Render"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ Render...")

    app_name = os.getenv('RENDER_APP_NAME')
    if not app_name:
        print("‚ùå RENDER_APP_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    try:
        response = requests.get(f"https://{app_name}.onrender.com/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç")
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            print(f"   –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {data.get('bot_running')}")
            print(f"   Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {data.get('webhook_set')}")
            print(f"   –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {data.get('queue_size')}")
            print(f"   –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∞–∫—Ç–∏–≤–µ–Ω: {data.get('processor_alive')}")

            return True
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {response.status_code}")
            return False

    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Render: {e}")
        print("   –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–ª–∏ URL –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
        return False

def check_telegram_webhook():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –≤ Telegram"""
    print("\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook –≤ Telegram...")

    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

    try:
        response = requests.get(f"https://api.telegram.org/bot{token}/getWebhookInfo", timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                webhook_info = data.get('result', {})
                url = webhook_info.get('url', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
                print(f"‚úÖ Webhook URL: {url}")

                if url:
                    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    print("‚ùå Webhook –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API Telegram: {data}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            return False

    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API: {e}")
        return False

def test_webhook_delivery():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É webhook"""
    print("\nüì® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ webhook...")

    token = os.getenv('TELEGRAM_BOT_TOKEN')
    app_name = os.getenv('RENDER_APP_NAME')

    if not token or not app_name:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return False

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_response = requests.get(f"https://api.telegram.org/bot{token}/getMe", timeout=10)
        if bot_response.status_code != 200:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
            return False

        bot_data = bot_response.json()
        if not bot_data.get('ok'):
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞")
            return False

        bot_info = bot_data.get('result', {})
        print(f"ü§ñ –ë–æ—Ç: @{bot_info.get('username')} ({bot_info.get('first_name')})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç
        webhook_url = f"https://{app_name}.onrender.com/webhook"
        test_response = requests.post(f"{webhook_url}?test=1",
                                    json={"test": "webhook_test"},
                                    timeout=10)

        if test_response.status_code == 200:
            print(f"‚úÖ Webhook URL –æ—Ç–≤–µ—á–∞–µ—Ç: {test_response.text}")
            return True
        else:
            print(f"‚ùå Webhook URL –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {test_response.status_code}")
            return False

    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ webhook: {e}")
        return False

def run_full_diagnosis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
    print("üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TELEGRAM –ë–û–¢–ê")
    print("=" * 50)

    results = []

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    results.append(("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment()))

    # 2. –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    results.append(("–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", test_bot_locally()))

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Render —Å—Ç–∞—Ç—É—Å–∞ (–µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
    if os.getenv('RENDER_APP_NAME'):
        results.append(("–°—Ç–∞—Ç—É—Å Render", check_render_status()))

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram webhook
    if os.getenv('TELEGRAM_BOT_TOKEN'):
        results.append(("Telegram Webhook", check_telegram_webhook()))
        results.append(("–î–æ—Å—Ç–∞–≤–∫–∞ Webhook", test_webhook_delivery()))

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print("=" * 50)

    for test_name, success in results:
        status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω" if success else "‚ùå –ü—Ä–æ–≤–∞–ª"
        print(f"{test_name}: {status}")

    successful_tests = sum(1 for _, success in results if success)
    total_tests = len(results)

    print(f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {successful_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if successful_tests == total_tests:
        print("üéâ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    elif successful_tests >= total_tests // 2:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –Ω–æ –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
    else:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

    return successful_tests == total_tests

def check_webhook_settings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞ –≤ Telegram"""
    print("\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ webhook –≤ Telegram...")

    token = os.getenv('TELEGRAM_BOT_TOKEN')
    app_name = os.getenv('RENDER_APP_NAME', 'telegram-itmo-bot')

    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

    try:
        response = requests.get(f"https://api.telegram.org/bot{token}/getWebhookInfo", timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                webhook_info = data.get('result', {})
                expected_url = f"https://{app_name}.onrender.com/webhook"

                print(f"üìç –¢–µ–∫—É—â–∏–π webhook URL: {webhook_info.get('url', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
                print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–π URL: {expected_url}")
                print(f"üìä –û–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {webhook_info.get('pending_update_count', 0)}")
                print(f"üîó –ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {webhook_info.get('max_connections', 40)}")

                if webhook_info.get('url') == expected_url:
                    print("‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                    return True
                else:
                    print("‚ùå Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    print(f"   –¢—Ä–µ–±—É–µ–º—ã–π URL: {expected_url}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API Telegram: {data}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            return False

    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API: {e}")
        return False

def test_webhook_response():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç webhook URL"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ webhook URL...")

    app_name = os.getenv('RENDER_APP_NAME', 'telegram-itmo-bot')

    try:
        webhook_url = f"https://{app_name}.onrender.com/webhook"
        print(f"üîó –¢–µ—Å—Ç–∏—Ä—É—é URL: {webhook_url}")

        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ webhook
        test_data = {
            "update_id": 999999999,
            "message": {
                "message_id": 1,
                "from": {"id": 123456789, "is_bot": False, "first_name": "Test"},
                "chat": {"id": 123456789, "type": "private"},
                "date": 1640995200,
                "text": "/test"
            }
        }

        response = requests.post(webhook_url, json=test_data, timeout=10)

        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")

        if response.status_code == 200 and "OK" in response.text:
            print("‚úÖ Webhook URL –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True
        else:
            print("‚ùå Webhook URL –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return False

    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ webhook URL: {e}")
        return False

if __name__ == "__main__":
    success = run_full_diagnosis()
    sys.exit(0 if success else 1)
