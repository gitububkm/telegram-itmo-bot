#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render —Å health check endpoint
–†–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å Telegram –±–æ—Ç–æ–º
"""

from flask import Flask
import threading
import time
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
bot_status = {
    'is_running': False,
    'last_update': None,
    'start_time': None
}

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞"""
    current_time = time.time()
    uptime = current_time - bot_status['start_time'] if bot_status['start_time'] else 0

    status_info = f"""
    ü§ñ Telegram Bot Status
    ======================

    Bot Running: {'‚úÖ –î–∞' if bot_status['is_running'] else '‚ùå –ù–µ—Ç'}
    Start Time: {time.ctime(bot_status['start_time']) if bot_status['start_time'] else '–ù–µ –∑–∞–ø—É—â–µ–Ω'}
    Uptime: {uptime:.0f} —Å–µ–∫—É–Ω–¥
    Last Update: {time.ctime(bot_status['last_update']) if bot_status['last_update'] else '–ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π'}

    Environment:
    - TELEGRAM_BOT_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.getenv('TELEGRAM_BOT_TOKEN') else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
    - SCHEDULE_JSON: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.getenv('SCHEDULE_JSON') else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

    –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {os.getenv('PORT', 10000)}
    """

    return f"<pre>{status_info}</pre>", 200

@app.route('/health')
def health_check():
    """Health check endpoint –¥–ª—è Render"""
    return {'status': 'healthy', 'timestamp': time.time()}, 200

@app.route('/status')
def status():
    """JSON —Å—Ç–∞—Ç—É—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return {
        'bot_running': bot_status['is_running'],
        'uptime': time.time() - bot_status['start_time'] if bot_status['start_time'] else 0,
        'last_update': bot_status['last_update'],
        'environment': {
            'telegram_token': bool(os.getenv('TELEGRAM_BOT_TOKEN')),
            'schedule_json': bool(os.getenv('SCHEDULE_JSON'))
        }
    }

def update_bot_status(running=False, last_update=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    bot_status['is_running'] = running
    if running and not bot_status['start_time']:
        bot_status['start_time'] = time.time()
    if last_update:
        bot_status['last_update'] = last_update

def run_web_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    port = int(os.getenv('PORT', 10000))
    logger.info(f"–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    from werkzeug.serving import make_server
    import threading

    server = make_server('0.0.0.0', port, app, threaded=True)
    server_thread = threading.Thread(target=server.serve_forever, daemon=True)
    server_thread.start()
    logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

def start_web_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ"""
    # run_web_server —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–π –ø–æ—Ç–æ–∫
    run_web_server()

if __name__ == '__main__':
    start_web_server()
