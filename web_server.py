#!/usr/bin/env python3
"""
–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Telegram –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π webhook
–°–æ–≤–º–µ—Å—Ç–∏–º —Å Render Free Web Service

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Flask —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.
"""

import os
import json
import logging
import time
import asyncio
import threading
from flask import Flask, request, jsonify
from telegram import Bot
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Application
telegram_application = None

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
bot_status = {
    'is_running': False,
    'start_time': None,
    'webhook_set': False,
    'last_update': None
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–µ–∂–ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
update_queue = []
queue_lock = threading.Lock()
processing_thread = None
shutdown_event = threading.Event()

def start_update_processor():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    global processing_thread

    def run_processor():
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è asyncio
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        async def process_updates():
            logger.info("–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            while not shutdown_event.is_set():
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ)
                    update_data = None
                    with queue_lock:
                        if update_queue:
                            update_data = update_queue.pop(0)
                            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {len(update_queue)}")

                    if update_data is None:
                        await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                        continue

                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_data.get('update_id', 'unknown')}")

                    if telegram_application:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
                        if not hasattr(telegram_application, '_initialized') or not telegram_application._initialized:
                            logger.error("‚ùå –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
                            continue

                        # –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö
                        from telegram import Update
                        update = Update.de_json(update_data, telegram_application.bot)

                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                        await telegram_application.process_update(update)
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω webhook update: {update.update_id}")
                    else:
                        logger.error("‚ùå Telegram Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

            logger.info("–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")

        try:
            loop.run_until_complete(process_updates())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        finally:
            loop.close()

    processing_thread = threading.Thread(target=run_processor, daemon=True)
    processing_thread.start()
    logger.info("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")

def stop_update_processor():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    global processing_thread

    if processing_thread and processing_thread.is_alive():
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        shutdown_event.set()

        processing_thread.join(timeout=5)

        if processing_thread.is_alive():
            logger.warning("–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
    return "Bot is running", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        update_data = request.get_json()

        if not update_data:
            logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π webhook –∑–∞–ø—Ä–æ—Å")
            return "OK", 200

        update_id = update_data.get('update_id', 'unknown')
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook update: {update_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if 'message' in update_data:
            message = update_data['message']
            user_id = message.get('from', {}).get('id', 'unknown')
            text = message.get('text', 'no text')
            logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{text}'")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        bot_status['last_update'] = time.time()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if processing_thread and processing_thread.is_alive():
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            with queue_lock:
                update_queue.append(update_data)

            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        else:
            logger.error("‚ùå –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return "Update processor not running", 500

        return "OK", 200

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return "Error processing webhook", 500

@app.route('/check-webhook')
def check_webhook():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –≤ Telegram"""
    try:
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not token:
            return jsonify({
                "error": "TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                "status": "error"
            }), 500

        import requests

        response = requests.get(f"https://api.telegram.org/bot{token}/getWebhookInfo", timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                webhook_info = data.get('result', {})
                return jsonify({
                    "webhook_url": webhook_info.get('url', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'),
                    "pending_update_count": webhook_info.get('pending_update_count', 0),
                    "last_error_date": webhook_info.get('last_error_date'),
                    "last_error_message": webhook_info.get('last_error_message'),
                    "max_connections": webhook_info.get('max_connections', 40),
                    "ip_address": webhook_info.get('ip_address'),
                    "status": "success"
                })
            else:
                return jsonify({
                    "error": f"–û—à–∏–±–∫–∞ API Telegram: {data}",
                    "status": "error"
                }), 500
        else:
            return jsonify({
                "error": f"–û—à–∏–±–∫–∞ HTTP: {response.status_code}",
                "status": "error"
            }), 500

    except Exception as e:
        return jsonify({
            "error": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}",
            "status": "error"
        }), 500

@app.route('/health')
def health_check():
    """Health check endpoint –¥–ª—è Render"""
    return jsonify({
        'status': 'healthy',
        'timestamp': time.time(),
        'bot_running': bot_status['is_running'],
        'webhook_set': bot_status['webhook_set'],
        'queue_size': len(update_queue),
        'processor_alive': processing_thread.is_alive() if processing_thread else False
    }), 200

@app.route('/status')
def status():
    """JSON —Å—Ç–∞—Ç—É—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    current_time = time.time()
    uptime = current_time - bot_status['start_time'] if bot_status['start_time'] else 0
    
    return jsonify({
        'bot_running': bot_status['is_running'],
        'webhook_set': bot_status['webhook_set'],
        'uptime': uptime,
        'last_update': bot_status['last_update'],
        'queue_size': len(update_queue),
        'processor_alive': processing_thread.is_alive() if processing_thread else False,
        'environment': {
            'telegram_token': bool(os.getenv('TELEGRAM_BOT_TOKEN')),
            'schedule_json': bool(os.getenv('SCHEDULE_JSON')),
            'port': os.getenv('PORT', '10000')
        }
    }), 200

def set_webhook():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è Telegram –±–æ—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    try:
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not token:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
            return False

        # –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Render URL
        app_name = os.getenv('RENDER_APP_NAME')
        if app_name:
            webhook_url = f"https://{app_name}.onrender.com/webhook"
        else:
            # –ï—Å–ª–∏ RENDER_APP_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é WEBHOOK_URL
            webhook_url = os.getenv('WEBHOOK_URL')
            if not webhook_url:
                logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è RENDER_APP_NAME –∏–ª–∏ WEBHOOK_URL")
                return False

        logger.info(f"üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: {webhook_url}")

        # –°–æ–∑–¥–∞–µ–º event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        import asyncio

        async def _set_webhook():
            bot = Bot(token=token)
            return await bot.set_webhook(url=webhook_url)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            result = loop.run_until_complete(_set_webhook())
            loop.close()

            if result:
                logger.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                bot_status['webhook_set'] = True
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ event loop: {e}")
            return False

    except TelegramError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
        return False

def update_bot_status(running=False, last_update=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    bot_status['is_running'] = running
    if running and not bot_status['start_time']:
        bot_status['start_time'] = time.time()
    if last_update:
        bot_status['last_update'] = last_update

def initialize_telegram_app(application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegram Application –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook"""
    global telegram_application
    telegram_application = application

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
    if not hasattr(application, '_initialized') or not application._initialized:
        logger.error("‚ùå Telegram Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –í—ã–∑–æ–≤–∏—Ç–µ application.initialize()")
        return

    logger.info("üîó –ü–µ—Ä–µ–¥–∞—á–∞ Application –≤ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    start_update_processor()

    logger.info("‚úÖ Telegram Application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è webhook")

def run_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask —Å–µ—Ä–≤–µ—Ä"""
    port = int(os.getenv('PORT', 10000))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if set_webhook():
        logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å webhook")
    else:
        logger.warning("‚ö†Ô∏è Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    update_bot_status(running=True)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        app.run(host='0.0.0.0', port=port, debug=False)
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        stop_update_processor()
        logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    run_server()