import os
import json
import logging
from datetime import datetime, timedelta
from flask import Flask, request, jsonify
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SCHEDULE_DATA = None
TOKEN = None
bot = None
app = Flask(__name__)
application = None

def load_schedule():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    global SCHEDULE_DATA
    schedule_json = os.getenv('SCHEDULE_JSON')
    if schedule_json:
        try:
            SCHEDULE_DATA = json.loads(schedule_json)
            logger.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            SCHEDULE_DATA = None
    else:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è SCHEDULE_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        SCHEDULE_DATA = None

def get_current_week_type():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (—á–µ—Ç–Ω–∞—è/–Ω–µ—á–µ—Ç–Ω–∞—è)"""
    # –ë–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ - 19 –æ–∫—Ç—è–±—Ä—è 2025, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –∫–æ–Ω–µ—Ü –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏ (–Ω–µ—á–µ—Ç–Ω–æ–π)
    base_date = datetime(2025, 10, 19)  # –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å —Å –±–∞–∑–æ–≤–æ–π –¥–∞—Ç—ã
    today = datetime.now()
    days_since_base = (today - base_date).days

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–µ–¥–µ–ª–∏
    # –ë–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ - –∫–æ–Ω–µ—Ü –Ω–µ—á–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏, –ø–æ—ç—Ç–æ–º—É:
    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å - –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –Ω–µ—á–µ—Ç–Ω–æ–π)
    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å - —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è
    weeks_since_base = days_since_base // 7
    if weeks_since_base % 2 == 0:
        return 1  # –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è (–±–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ - –∫–æ–Ω–µ—Ü –Ω–µ—á–µ—Ç–Ω–æ–π)
    else:
        return 2  # —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è

def get_weekday_name(date):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
    weekdays = {
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        1: "–í—Ç–æ—Ä–Ω–∏–∫",
        2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥",
        4: "–ü—è—Ç–Ω–∏—Ü–∞",
        5: "–°—É–±–±–æ—Ç–∞",
        6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    return weekdays[date.weekday()]

def format_class_info(class_item):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏"""
    if 'window' in class_item:
        return f"ü™ü –û–∫–Ω–æ: {class_item['window']} ({class_item['duration']})"
    else:
        return (
            f"‚è∞ {class_item['time']}\n"
            f"üìö {class_item['subject']}\n"
            f"üè¢ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {class_item['room']}\n"
            f"üìç {class_item['address']}\n"
        )

def get_schedule_for_date(date_str=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    if not SCHEDULE_DATA:
        return "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

    try:
        if date_str:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú
            day, month = map(int, date_str.split('.'))
            year = datetime.now().year
            target_date = datetime(year, month, day)
        else:
            target_date = datetime.now()

        current_week_type = get_current_week_type()
        weekday_name = get_weekday_name(target_date)

        # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –Ω–µ–¥–µ–ª—é –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        for week in SCHEDULE_DATA['schedule']:
            if week['week'] == current_week_type:
                # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å
                for day in week['days']:
                    if day['day'] == weekday_name:
                        classes = day['classes']

                        if not classes:
                            note = day.get('note', '–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π')
                            return f"üìÖ {weekday_name} ({target_date.strftime('%d.%m.%Y')})\n\n{note}"

                        response = f"üìÖ {weekday_name} ({target_date.strftime('%d.%m.%Y')})\n\n"

                        for class_item in classes:
                            response += format_class_info(class_item) + "\n"

                        return response

        return f"‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {weekday_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    except ValueError:
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"

def get_week_schedule():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"""
    if not SCHEDULE_DATA:
        return "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

    current_week_type = get_current_week_type()

    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –Ω–µ–¥–µ–ª—é –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    for week in SCHEDULE_DATA['schedule']:
        if week['week'] == current_week_type:
            response = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n\n"

            for day in week['days']:
                day_name = day['day']
                classes = day['classes']

                response += f"üìÖ {day_name}:\n"

                if not classes:
                    note = day.get('note', '–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π')
                    response += f"   {note}\n\n"
                else:
                    for class_item in classes:
                        response += f"   {format_class_info(class_item)}\n"
                response += "\n"

            return response

    return "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data='today')],
        [InlineKeyboardButton("üìÜ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞", callback_data='date')],
        [InlineKeyboardButton("üìÖ –ù–∞ –Ω–µ–¥–µ–ª—é", callback_data='week')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        'üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ò–¢–ú–û!\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    if query.data == 'today':
        schedule = get_schedule_for_date()
        await query.edit_message_text(text=schedule)

    elif query.data == 'date':
        await query.edit_message_text(
            text='üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12)'
        )
        context.user_data['waiting_for_date'] = True

    elif query.data == 'week':
        schedule = get_week_schedule()
        await query.edit_message_text(text=schedule)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if context.user_data.get('waiting_for_date'):
        date_str = update.message.text.strip()
        schedule = get_schedule_for_date(date_str)

        await update.message.reply_text(schedule)
        context.user_data['waiting_for_date'] = False
    else:
        await update.message.reply_text(
            '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.'
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f'Update {update} caused error {context.error}')
    if update and update.message:
        await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')

def init_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    global TOKEN, bot, application

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    load_schedule()

    if not SCHEDULE_DATA:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è SCHEDULE_JSON")
        logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è SCHEDULE_JSON —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Render Dashboard")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Render Dashboard")
        return False

    TOKEN = token
    bot = Bot(token=token)

    # –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π application
    application = Application.builder().token(token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_error_handler(error_handler)

    return True

@app.route('/', methods=['GET'])
def home():
    """–î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    return f'''
    <!DOCTYPE html>
    <html>
    <head><title>Telegram –ò–¢–ú–û –ë–æ—Ç</title></head>
    <body style="font-family: Arial, sans-serif; text-align: center; padding: 50px;">
        <h1>ü§ñ Telegram –ò–¢–ú–û –ë–æ—Ç</h1>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {"‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç" if bot else "‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}</p>
        <p><strong>–í–µ–±—Ö—É–∫:</strong> <code>/webhook</code></p>
        <p><strong>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞:</strong> <code>https://telegram-itmo-bot.onrender.com/webhook</code></p>
        <p><strong>–í–∞—à —Ç–µ–∫—É—â–∏–π URL (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π):</strong> <code>https://telegram-itmo-bot-.onrender.com/webhook</code></p>
        <hr>
        <h3>üö® –í–µ–±—Ö—É–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</h3>
        <p>–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:</p>
        <code style="background: #f0f0f0; padding: 10px; display: block; margin: 10px;">
        curl "https://api.telegram.org/bot8181605760:AAFm06efAuVxbFLU0OGUhoYMXG3MUznvoh0/setWebhook?url=https://telegram-itmo-bot.onrender.com/webhook"
        </code>
        <p>–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>/start</code> –±–æ—Ç—É –≤ Telegram</p>
    </body>
    </html>
    '''

@app.route('/webhook', methods=['POST', 'GET'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram"""
    if request.method == 'GET':
        return f'''
        <!DOCTYPE html>
        <html>
        <head><title>–í–µ–±—Ö—É–∫ Telegram –ë–æ—Ç–∞</title></head>
        <body style="font-family: Arial, sans-serif; text-align: center; padding: 50px;">
            <h1>üîó –í–µ–±—Ö—É–∫ Telegram –ë–æ—Ç–∞</h1>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {"‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π" if bot else "‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}</p>
            <p><strong>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL:</strong> <code>https://telegram-itmo-bot.onrender.com/webhook</code></p>
            <hr>
            <h3>üö® –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞!</h3>
            <p><strong>–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</strong></p>
            <code style="background: #e7f3ff; padding: 10px; display: block; margin: 10px;">
            curl "https://api.telegram.org/bot8181605760:AAFm06efAuVxbFLU0OGUhoYMXG3MUznvoh0/getWebhookInfo"
            </code>
            <p><strong>–î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –≤–µ–±—Ö—É–∫ URL.</strong></p>
            <p><a href="/">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a></p>
        </body>
        </html>
        '''

    if not bot:
        return jsonify({'error': 'Bot not initialized'}), 500

    try:
        update_data = request.get_json()
        if update_data:
            update = Update.de_json(update_data, bot)
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(process_update(update))
            loop.close()
        return jsonify({'status': 'ok'}), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({'error': str(e)}), 500

async def process_update(update):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram"""
    global application

    if not application:
        logger.error("Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π application
    await application.process_update(update)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –ò–¢–ú–û...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    if not init_bot():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
        return

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç –≤ Render (–µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è PORT)
    port = os.getenv('PORT')
    if port:
        # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
        logger.info(f"–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        app.run(host='0.0.0.0', port=int(port), debug=False)
    else:
        # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling")
        import asyncio
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π application –¥–ª—è polling —Ä–µ–∂–∏–º–∞
        local_app = Application.builder().token(TOKEN).build()
        local_app.add_handler(CommandHandler("start", start))
        local_app.add_handler(CallbackQueryHandler(button_handler))
        local_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
        local_app.add_error_handler(error_handler)

        loop.run_until_complete(local_app.run_polling())
        loop.close()

if __name__ == '__main__':
    main()
