#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
"""

import sys
import os
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def get_moscow_time():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ (—Å–∏–º—É–ª—è—Ü–∏—è)"""
    # –î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è - 19 –æ–∫—Ç—è–±—Ä—è 2025, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    # –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    test_time = datetime(2025, 10, 19, 12, 0, 0, tzinfo=ZoneInfo("Europe/Moscow"))
    return test_time

def get_current_week_type(target_date=None):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (—á–µ—Ç–Ω–∞—è/–Ω–µ—á–µ—Ç–Ω–∞—è)"""
    if target_date is None:
        target_date = get_moscow_time()

    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ –ø—Ä–æ—à–ª–æ–º (–¥–µ–Ω—å –æ—Ç—Å—á–µ—Ç–∞)
    days_since_monday = (target_date.weekday() - 0) % 7  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    if days_since_monday == 0:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        reference_monday = target_date
    else:
        reference_monday = target_date - timedelta(days=days_since_monday)

    # –ë–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ - 12 –æ–∫—Ç—è–±—Ä—è 2025, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –∫–æ–Ω–µ—Ü —á–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏
    base_date = datetime(2025, 10, 12, tzinfo=ZoneInfo("Europe/Moscow"))  # –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å —Å –±–∞–∑–æ–≤–æ–π –¥–∞—Ç—ã –¥–æ –¥–Ω—è –æ—Ç—Å—á–µ—Ç–∞
    days_since_base = (reference_monday - base_date).days
    weeks_since_base = days_since_base // 7

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω—è –æ—Ç—Å—á–µ—Ç–∞
    # –ë–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ - –∫–æ–Ω–µ—Ü —á–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏, –ø–æ—ç—Ç–æ–º—É:
    # –ï—Å–ª–∏ –¥–µ–Ω—å –æ—Ç—Å—á–µ—Ç–∞ - —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –æ—Ç –±–∞–∑–æ–≤–æ–π –¥–∞—Ç—ã - –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è
    # –ï—Å–ª–∏ –¥–µ–Ω—å –æ—Ç—Å—á–µ—Ç–∞ - –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –æ—Ç –±–∞–∑–æ–≤–æ–π –¥–∞—Ç—ã - —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è
    if weeks_since_base % 2 == 0:
        return 1  # –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è
    else:
        return 2  # —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è

def get_weekday_name(date):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
    weekdays = {
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        1: "–í—Ç–æ—Ä–Ω–∏–∫",
        2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥",
        4: "–ü—è—Ç–Ω–∏—Ü–∞",
        5: "–°—É–±–±–æ—Ç–∞",
        6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    return weekdays[date.weekday()]

def test_schedule_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –†–ê–°–ü–ò–°–ê–ù–ò–Ø –° –ú–û–°–ö–û–í–°–ö–ò–ú –í–†–ï–ú–ï–ù–ï–ú")
    print("=" * 60)

    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ (—Ç–µ—Å—Ç–æ–≤–æ–µ)
    current_time = get_moscow_time()
    print(f"üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%d.%m.%Y %H:%M:%S %Z')}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    weekday = get_weekday_name(current_time)
    print(f"üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {weekday}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ (—á–µ—Ç–Ω–∞—è/–Ω–µ—á–µ—Ç–Ω–∞—è)
    week_type = get_current_week_type(current_time)
    print(f"üìä –¢–∏–ø –Ω–µ–¥–µ–ª–∏: {'–Ω–µ—á–µ—Ç–Ω–∞—è' if week_type == 1 else '—á–µ—Ç–Ω–∞—è'}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –¥–∞—Ç—ã
    test_dates = [
        ("19.10", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"),  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (–±–µ–∑ –≥–æ–¥–∞)
        ("20.10", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"), # –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        ("18.10", "–°—É–±–±–æ—Ç–∞"),     # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
    ]

    print("\nüìÖ –¢–µ—Å—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏:")
    for date_str, expected_day in test_dates:
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥)
            day, month = map(int, date_str.split('.'))
            year = current_time.year
            test_date = datetime(year, month, day, tzinfo=ZoneInfo("Europe/Moscow"))

            actual_day = get_weekday_name(test_date)
            week_type = get_current_week_type(test_date)

            status = "‚úÖ" if actual_day == expected_day else "‚ùå"
            print(f"   {date_str}.2025: {actual_day} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_day}) {status}")
            print(f"      –¢–∏–ø –Ω–µ–¥–µ–ª–∏: {'–Ω–µ—á–µ—Ç–Ω–∞—è' if week_type == 1 else '—á–µ—Ç–Ω–∞—è'}")

        except Exception as e:
            print(f"   {date_str}: –û—à–∏–±–∫–∞ - {e}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —á–µ—Ç–Ω–æ—Å—Ç–∏/–Ω–µ—á–µ—Ç–Ω–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª—å
    print("\nüìä –¢–µ—Å—Ç—ã —á–µ—Ç–Ω–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª—å:")

    # –ë–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ - 6 –æ–∫—Ç—è–±—Ä—è 2025 (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫) - –Ω–∞—á–∞–ª–æ —á–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏
    base_date = datetime(2025, 10, 6, tzinfo=ZoneInfo("Europe/Moscow"))
    print(f"üìÖ –ë–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞: {base_date.strftime('%d.%m.%Y')} ({get_weekday_name(base_date)})")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –≤–ø–µ—Ä–µ–¥
    for weeks_ahead in [0, 1, 2, 7, 8]:
        test_date = base_date + timedelta(weeks=weeks_ahead)
        week_type = get_current_week_type(test_date)
        expected_type = "—á–µ—Ç–Ω–∞—è" if weeks_ahead % 2 == 0 else "–Ω–µ—á–µ—Ç–Ω–∞—è"

        status = "‚úÖ" if ((week_type == 2 and weeks_ahead % 2 == 0) or (week_type == 1 and weeks_ahead % 2 == 1)) else "‚ùå"
        print(f"   {weeks_ahead} –Ω–µ–¥–µ–ª—å: {test_date.strftime('%d.%m.%Y')} - {'—á–µ—Ç–Ω–∞—è' if week_type == 2 else '–Ω–µ—á–µ—Ç–Ω–∞—è'} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_type}) {status}")

    return True

if __name__ == "__main__":
    try:
        success = test_schedule_logic()
        print(f"\n{'‚úÖ' if success else '‚ùå'} –¢–µ—Å—Ç {'–ø—Ä–æ–π–¥–µ–Ω' if success else '–ø—Ä–æ–≤–∞–ª–µ–Ω'}")
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
