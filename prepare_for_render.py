#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render
–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã —Å –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å git
"""

import os
import subprocess
import sys

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, encoding='utf-8')
        if result.returncode == 0:
            print(f"‚úÖ {description}")
            return result.stdout
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {description}: {result.stderr}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        return None

def main():
    print("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å git
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ git...")
    git_status = run_command("git status --porcelain", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ git")

    # –û–±–Ω–æ–≤–ª—è–µ–º runtime.txt –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    print("\nüîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ runtime.txt –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
    run_command("git add runtime.txt", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ runtime.txt")

    if git_status:
        files = git_status.strip().split('\n')
        if files and files[0]:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–º–º–∏—Ç–∞
            print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(files)} –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
            for file in files:
                print(f"   {file}")
        else:
            print("‚úÖ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è")

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    private_files = [
        'schedule_for_render.json',
        '.env',
        '.env.local'
    ]

    print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π...")
    for file in private_files:
        if os.path.exists(file):
            try:
                os.remove(file)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω: {file}")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file}: {e}")
        else:
            print(f"‚úÖ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (—É–∂–µ —É–¥–∞–ª–µ–Ω): {file}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –µ—Å—Ç—å
    required_files = [
        'main.py',
        'requirements.txt',
        'runtime.txt',
        '.gitignore',
        'README.md'
    ]

    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    missing_files = []
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {file}")
        else:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {file}")
            missing_files.append(file)

    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        print("–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º!")
        return False

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ git status
    print("\nüìã –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ git status...")
    run_command("git status", "–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å git")

    print("\n" + "=" * 60)
    print("üéâ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≥–æ—Ç–æ–≤ –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –¥–µ–ø–ª–æ—é –Ω–∞ Render!")
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: git add . && git commit -m 'Fix Python version compatibility'")
    print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ GitHub: git push")
    print("3. Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –¥–µ–ø–ª–æ–π")
    print("4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ Render Dashboard:")
    print("   - TELEGRAM_BOT_TOKEN: –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
    print("   - SCHEDULE_JSON: –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–∏–∑ env_example.txt)")
    print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ Render Dashboard –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è")

    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
