#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

def get_moscow_time():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ"""
    moscow_tz = ZoneInfo("Europe/Moscow")
    return datetime.now(moscow_tz)

def format_moscow_time(dt=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    if dt is None:
        dt = get_moscow_time()

    return dt.strftime("%d.%m.%Y %H:%M:%S (–ú–°–ö)")

def is_new_day(current_time=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—á–∞–ª—Å—è –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏"""
    if current_time is None:
        current_time = get_moscow_time()

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞ –¥–Ω—è (00:00:00)
    day_start = current_time.replace(hour=0, minute=0, second=0, microsecond=0)

    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω–∞—á–∞–ª—É –¥–Ω—è, —Ç–æ –¥–µ–Ω—å —É–∂–µ –Ω–∞—á–∞–ª—Å—è
    return current_time >= day_start

def get_days_since_date(target_date_str, current_time=None):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É –¥–∞—Ç–æ–π –∏ —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ –ú–æ—Å–∫–≤–µ"""
    if current_time is None:
        current_time = get_moscow_time()

    try:
        # –ü–∞—Ä—Å–∏–º —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì)
        target_date = datetime.strptime(target_date_str, "%d.%m.%Y")
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        target_date = target_date.replace(tzinfo=ZoneInfo("Europe/Moscow"))

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
        delta = current_time - target_date
        return delta.days

    except ValueError:
        return None

def test_moscow_time():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    print("üïê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–°–ö–û–í–°–ö–û–ì–û –í–†–ï–ú–ï–ù–ò")
    print("=" * 50)

    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
    current_time = get_moscow_time()
    formatted_time = format_moscow_time(current_time)

    print(f"üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ: {formatted_time}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–Ω—è
    day_started = is_new_day(current_time)
    print(f"‚úÖ –î–µ–Ω—å –Ω–∞—á–∞–ª—Å—è: {day_started}")

    # –¢–µ—Å—Ç —Ä–∞–∑–Ω–∏—Ü—ã –¥–∞—Ç
    days_since = get_days_since_date("01.01.2024", current_time)
    if days_since is not None:
        print(f"üìä –î–Ω–µ–π —Å 01.01.2024: {days_since}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–Ω–µ–π")

    # –¢–µ—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    test_dates = ["19.10.2025", "20.10.2025", "25.12.2024"]

    print("\nüìÖ –¢–µ—Å—Ç—ã —Ä–∞–∑–Ω–∏—Ü—ã –¥–∞—Ç:")
    for date_str in test_dates:
        days = get_days_since_date(date_str, current_time)
        if days is not None:
            status = "–ø—Ä–æ—à–ª–æ" if days > 0 else "–æ—Å—Ç–∞–ª–æ—Å—å" if days < 0 else "—Å–µ–≥–æ–¥–Ω—è"
            print(f"   {date_str}: {abs(days)} –¥–Ω–µ–π {status}")
        else:
            print(f"   {date_str}: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")

    return True

def test_timezone_compatibility():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏"""
    print("\nüåç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ß–ê–°–û–í–´–• –ü–û–Ø–°–û–í")
    print("=" * 50)

    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö
    moscow_time = get_moscow_time()
    utc_time = datetime.now(ZoneInfo("UTC"))

    print(f"üïê –ú–æ—Å–∫–≤–∞: {format_moscow_time(moscow_time)}")
    print(f"üåç UTC: {utc_time.strftime('%d.%m.%Y %H:%M:%S (UTC)')}")

    # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ú–æ—Å–∫–≤–æ–π –∏ UTC (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 3 —á–∞—Å–∞ –∑–∏–º–æ–π, 4 —á–∞—Å–∞ –ª–µ—Ç–æ–º)
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è timestamp
    moscow_timestamp = moscow_time.timestamp()
    utc_timestamp = utc_time.timestamp()
    hours_diff = (moscow_timestamp - utc_timestamp) / 3600

    print(f"‚è∞ –†–∞–∑–Ω–∏—Ü–∞ —Å UTC: {hours_diff} —á–∞—Å–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ª–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è
    # –í 2024 –≥–æ–¥—É –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ª–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è –≤ –†–æ—Å—Å–∏–∏ –±—ã–ª 31 –º–∞—Ä—Ç–∞
    spring_date = datetime(2024, 3, 31, 2, 0, tzinfo=ZoneInfo("Europe/Moscow"))
    formatted_spring = format_moscow_time(spring_date)
    print(f"üå∏ –í–µ—Å–µ–Ω–Ω–∏–π –ø–µ—Ä–µ—Ö–æ–¥ 31.03.2024: {formatted_spring}")

    return True

def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô –í–†–ï–ú–ï–ù–ò")
    print("=" * 60)

    try:
        # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
        test_moscow_time()
        test_timezone_compatibility()

        print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üïê –§—É–Ω–∫—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º")

        return True

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
